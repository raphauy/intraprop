
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  role            String    @default("user")
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]

  inmobiliaria    Inmobiliaria? @relation(fields: [inmobiliariaId], references: [id], onDelete: NoAction)
  inmobiliariaId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Inmobiliaria {
  id                String   @id @default(cuid())
  name              String
  description       String?
  url               String?
  celulares         String?
  slug              String    @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  users             User[]
  properties        Property[]
}

model Property {
  id                     String    @id @default(cuid())
  idPropiedad            String?
  tipo                   String?
  titulo                 String?
  descripcion            String?
  zona                   String?
  ciudad                 String?
  departamento           String?
  pais                   String?
  enVenta                String?
  enAlquiler             String?
  enAlquilerTemporal     String?
  monedaVenta            String?
  precioVenta            String?
  precioVentaUSD         Int?
  monedaAlquiler         String?
  precioAlquiler         String?
  precioAlquilerUYU      Int?
  monedaAlquilerTemporal String?
  precioAlquilerTemporal String?
  alquilada              String?  
  dormitorios            String?
  banios                 String?
  garages                String?
  parrilleros            String?
  piscinas               String?
  calefaccion            String?
  amueblada              String?
  piso                   String?
  pisosEdificio          String?
  seguridad              String?
  asensor                String?
  lavadero               String?
  superficieTotal        String?
  superficieConstruida   String?
  monedaGastosComunes    String?
  gastosComunes          String?
  url                    String?

  inmobiliaria           Inmobiliaria? @relation(fields: [inmobiliariaId], references: [id], onDelete: NoAction)
  inmobiliariaId         String?

  coincidences          Coincidence[]

  content               String?
  embedding Unsupported("vector(1536)")?
}

model Pedido {
  id                String      @id @default(cuid())
  number            Int         @default(autoincrement())
  text              String      @db.Text
  phone             String      @default("")
  name              String?     @default("")
  group             String?     @default("")
  contacto          String?
  operacion         String?
  tipo              String?
  presupuesto       String?
  presupuestoMin    Int?
  presupuestoMax    Int?
  presupuestoLog    String?
  presupuestoMoneda String?
  zona              String?
  dormitorios       String?
  caracteristicas   String?
  openaiJson        String?     @db.Text
  embeddings        Unsupported("vector(1536)")?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  coincidences      Coincidence[]
  notifications     NotificationPedido[]
  status            String      @default("")
  coincidencesChecked Int?     @default(0)
}

model Coincidence {
  id              String      @id @default(cuid())
  number          Int
  distance        Float
  score           Int         @default(0)
  pedido          Pedido      @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  pedidoId        String
  property        Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId      String
  createdAt       DateTime    @default(now())
  state           String      @default("pending")
  notifications   Notification[]
  notificationPedidos NotificationPedido[]
}

model Notification {
  id             String       @id @default(cuid())
  status         String       @default("pending")
  error          String?
  sentAt         DateTime?
  celulares      String?
  json           String?      @db.Text
  coincidences   Coincidence  @relation(fields: [coincidenceId], references: [id], onDelete: Cascade)
  coincidenceId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt  
}

model NotificationPedido {
  id             String       @id @default(cuid())
  status         String       @default("pending")
  error          String?
  sentAt         DateTime?
  celulares      String?
  json           String?      @db.Text
  pedido         Pedido       @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  pedidoId       String
  coincidences   Coincidence[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt  
}

model Config {
  id             String       @id @default(cuid())
  name           String       @unique
  value          String?      @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt  
}
